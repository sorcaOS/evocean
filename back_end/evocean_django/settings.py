"""
Django settings for omelet-chat project.

Generated by 'django-admin startproject' using Django 4.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import json
import os
from pathlib import Path

import environ
import google
from google.auth.exceptions import DefaultCredentialsError
from google.oauth2 import service_account

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
IS_DOCKER = os.environ.get("IS_DOCKER", False)

# LOAD ENV
env = environ.Env(DEBUG=(bool, True))
env_file_name = env.get_value("ENV_FILE_NAME", default=".env")
env_file = f"{BASE_DIR}/{env_file_name}"
print(f"Loading env file: {env_file}")
try:
    _, os.environ["GOOGLE_CLOUD_PROJECT"] = google.auth.default()
except DefaultCredentialsError:
    pass

if os.path.isfile(env_file):
    # Use a local secret file, if provided
    env.read_env(env_file)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-*_jeh#t$1of7s0=n4b61(58kr9e--^_u-hu&lnpdl+nv)g39%s"

CSRF_TRUSTED_ORIGINS = ["https://identify-api.omelet.tech", "http://localhost:8000"]
ALLOWED_HOSTS = ["*"]

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework.authtoken",
    "django_filters",
    "rest_framework",  # Django REST framework
    "drf_yasg",  # Swagger
    "corsheaders",
    "django_firebase_auth",
    "marketplace",
    "users",
]

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.TokenAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
    # "DEFAULT_SCHEMA_CLASS": "rest_framework.schemas.coreapi.AutoSchema",
    "DEFAULT_FILTER_BACKENDS": [
        "django_filters.rest_framework.DjangoFilterBackend",
        "rest_framework.filters.SearchFilter",
    ],
    "DEFAULT_PAGINATION_CLASS": "src.entities.evocean_pagination.OvoceanPagination",
    "PAGE_SIZE": 10,
    "PAGE_SIZE_QUERY_PARAM": "page_size",
    "MAX_PAGE_SIZE": 100,
    "DEFAULT_RENDERER_CLASSES": (
        "rest_framework.renderers.JSONRenderer",
        "rest_framework.renderers.BrowsableAPIRenderer",
        "rest_framework.renderers.AdminRenderer",
        "drf_excel.renderers.XLSXRenderer",
        # "rest_framework.renderers.HTMLFormRenderer",
    ),
    # 'DEFAULT_PARSER_CLASSES': (
    #     'rest_framework.parsers.FormParser',
    #     'rest_framework.parsers.MultiPartParser'
    # )
}

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]
ROOT_URLCONF = "evocean_django.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "evocean_django.wsgi.application"

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {"default": env.db()}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

CORS_ALLOW_HEADERS = ["*"]
CORS_ALLOWED_ORIGINS = [
    "https://rhm-development.evoda.io",
    "http://localhost:4200",
    "http://127.0.0.1:4200",
    "http://127.0.0.1:9000",
    "http://118.70.239.107:8080",
    "http://localhost:3000",
    "http://localhost:3333",
    "http://127.0.0.1:3333",
    "https://identify-api.omelet.tech",
    "https://identify.omelet.tech",
    "https://chat.omelet.tech",
    "https://evocean.omelet.tech",
    "http://localhost:443",
    "http://localhost:80",
]
CORS_ALLOW_CREDENTIALS = True

# Auth with firebase
FIREBASE_CREDENTIALS_FILE = f"{BASE_DIR}/firebase-service-account.json"
IS_DOCKER = env("IS_DOCKER", default=False)
CA_DEFAULT_HOSTNAME = "evocean.omelet.tech"

GS_BUCKET_NAME = env("GS_BUCKET_NAME")
try:
    _, project = google.auth.default()
    os.environ["GOOGLE_CLOUD_PROJECT"] = project
except google.auth.exceptions.DefaultCredentialsError:
    print("No credentials found, skipping")

cred_path = f"{BASE_DIR}/credentials.json"

cred_path = os.path.abspath(cred_path)
if not os.path.exists(cred_path):
    with open(cred_path, "w") as f:
        data = json.loads(os.environ["GCP_CREDENTIALS"])
        json.dump(data, f)
GS_CREDENTIALS = service_account.Credentials.from_service_account_file(cred_path)

STORAGES = {
    "default": {
        "BACKEND": "storages.backends.gcloud.GoogleCloudStorage",
    },
    "staticfiles": {
        "BACKEND": "storages.backends.gcloud.GoogleCloudStorage",
    },
    "django-ca": {
        "BACKEND": "django.core.files.storage.FileSystemStorage",
        "OPTIONS": {
            "location": f"{BASE_DIR}/ssl",
            "file_permissions_mode": 0o600,
            "directory_permissions_mode": 0o700,
        },
    },
}

GS_PROJECT_ID = env("GS_PROJECT_ID")

# REDIS
REDIS_HOST = env("REDIS_HOST")
REDIS_PORT = env("REDIS_PORT")

# Celery Configuration Options
CELERY_TIMEZONE = "Asia/Ho_Chi_Minh"
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = 30 * 60
CELERY_RESULT_BACKEND = "django-db"
CELERY_CACHE_BACKEND = "django-cache"
CELERY_BROKER_URL = "redis://" + REDIS_HOST + ":" + REDIS_PORT + "/0"

# DJANGO CACHES REDIS
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": f"redis://{env('REDIS_HOST')}:{env('REDIS_PORT')}/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
    }
}

# DEBUG = not IS_DOCKER
DEBUG = True
